# Flutter App Signing and Build Co### How to troubleshoot APK build issues?
- **PATH Issues**: Ensure Java JDK is installed and keytool is in the system PATH. Use full paths if needed.
- **Keystore Not Found**: Verify the keystore file path in key.properties and build.gradle is correct. The file should be in android/app/.
- **Gradle Errors**: Check for syntax errors in build.gradle. Run `./gradlew clean` and rebuild.
- **Mismatched Passwords**: Ensure storePassword and keyPassword in key.properties match the keystore passwords exactly.
- **Common Fixes**: Update Gradle wrapper, check Flutter doctor for issues, ensure all dependencies are resolved. Use `--stacktrace` for detailed error logs.

## Technical Approach for the Project

1. **Framework & Tools**: Flutter (Dart) with VS Code IDE, Gradle for Android builds, and Java keytool for keystore generation.
2. **App Architecture**: Cross-platform mobile app with custom UI widgets for login, dashboard, profile, and to-do list features.
3. **Signing & Security**: Generated RSA keystore for app signing, configured build.gradle for release builds with secure password handling.
4. **Build Process**: Used Flutter CLI for cleaning and building signed release APKs, integrated with Android Gradle for deployment.
5. **Deployment & Future**: Supports APK/AAB for Android Play Store; future enhancements include CI/CD, advanced state management, and backend integration. & Documentation

## Used Commands

1. **cd .\android\app**  
   - Navigates to the Android app directory where the keystore and build files are located.

2. **& "C:\Program Files\Java\jdk-17\bin\keytool.exe" -genkeypair -v -keystore 23aiml010_om.jks -alias omchoksi -keyalg RSA -keysize 2048 -validity 10000**  
   - Generates a new keystore file (23aiml010_om.jks) with an RSA key pair for signing the Android app. The key is valid for 10,000 days.

3. **flutter clean**  
   - Cleans the Flutter project by removing build artifacts, caches, and temporary files to ensure a fresh build.

4. **cd android; ./gradlew clean**  
   - Navigates to the android directory and runs Gradle clean to remove Android build outputs and caches.

5. **flutter build apk --release**  
   - Builds a signed release APK for the Flutter app using the configured keystore for production deployment.

6. **dir 'D:\SEM 5\AIML308_Mobile Application Development\PR_LIST\practical_10\android\app'**  
   - Lists the contents of the android/app directory to verify the presence of the keystore file.

## Documentation Answers

### What is a keystore?
A keystore is a secure file that stores private keys and certificates used for signing Android applications. It ensures that app updates are verified as coming from the same author, preventing unauthorized modifications and maintaining app integrity.

### What are deployment options in Flutter?
- **Debug APK**: Built for development with debugging enabled, not optimized for performance.
- **Profile APK**: Includes profiling tools for performance analysis, used for testing app performance.
- **Release APK**: Optimized, signed APK for production deployment on the Google Play Store.
- **App Bundle (AAB)**: A newer format that includes all app code and resources, optimized for distribution via Google Play.
- **iOS Build**: For iOS deployment, involves building an IPA file via Xcode for App Store submission.

### How to troubleshoot APK build issues?
- **PATH Issues**: Ensure Java JDK is installed and keytool is in the system PATH. Use full paths if needed.
- **Keystore Not Found**: Verify the keystore file path in key.properties and build.gradle is correct. The file should be in android/app/.
- **Gradle Errors**: Check for syntax errors in build.gradle. Run ./gradlew clean and rebuild.
- **Mismatched Passwords**: Ensure storePassword and keyPassword in key.properties match the keystore passwords exactly.
- **Common Fixes**: Update Gradle wrapper, check Flutter doctor for issues, ensure all dependencies are resolved. Use --stacktrace for detailed error logs.
